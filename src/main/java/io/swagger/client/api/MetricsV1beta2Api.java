/*
 * Timeplus
 * Welcome to the Timeplus HTTP REST API specification.
 *
 * OpenAPI spec version: v1
 * Contact: support@timeplus.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.GlobalMetricsResult;
import io.swagger.client.model.ResourceMetricsResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsV1beta2Api {
    private ApiClient apiClient;

    public MetricsV1beta2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsV1beta2Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for v1beta2GlobalMetricsGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1beta2GlobalMetricsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1beta2/global-metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1beta2GlobalMetricsGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = v1beta2GlobalMetricsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * query global metrics.
     * query global metrics..
     * @return GlobalMetricsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GlobalMetricsResult v1beta2GlobalMetricsGet() throws ApiException {
        ApiResponse<GlobalMetricsResult> resp = v1beta2GlobalMetricsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * query global metrics.
     * query global metrics..
     * @return ApiResponse&lt;GlobalMetricsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GlobalMetricsResult> v1beta2GlobalMetricsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = v1beta2GlobalMetricsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GlobalMetricsResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * query global metrics. (asynchronously)
     * query global metrics..
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1beta2GlobalMetricsGetAsync(final ApiCallback<GlobalMetricsResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1beta2GlobalMetricsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GlobalMetricsResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for v1beta2ResourceMetricsGet
     * @param metricsType  (required)
     * @param resourceIds  (required)
     * @param timeRange  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call v1beta2ResourceMetricsGetCall(String metricsType, List<String> resourceIds, Integer timeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1beta2/resource-metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (metricsType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metrics_type", metricsType));
        if (resourceIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "resource_ids[]", resourceIds));
        if (timeRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("time_range", timeRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call v1beta2ResourceMetricsGetValidateBeforeCall(String metricsType, List<String> resourceIds, Integer timeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'metricsType' is set
        if (metricsType == null) {
            throw new ApiException("Missing the required parameter 'metricsType' when calling v1beta2ResourceMetricsGet(Async)");
        }
        
        // verify the required parameter 'resourceIds' is set
        if (resourceIds == null) {
            throw new ApiException("Missing the required parameter 'resourceIds' when calling v1beta2ResourceMetricsGet(Async)");
        }
        
        // verify the required parameter 'timeRange' is set
        if (timeRange == null) {
            throw new ApiException("Missing the required parameter 'timeRange' when calling v1beta2ResourceMetricsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = v1beta2ResourceMetricsGetCall(metricsType, resourceIds, timeRange, progressListener, progressRequestListener);
        return call;

    }

    /**
     * query resource metrics.
     * query resource metrics..
     * @param metricsType  (required)
     * @param resourceIds  (required)
     * @param timeRange  (required)
     * @return ResourceMetricsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourceMetricsResult v1beta2ResourceMetricsGet(String metricsType, List<String> resourceIds, Integer timeRange) throws ApiException {
        ApiResponse<ResourceMetricsResult> resp = v1beta2ResourceMetricsGetWithHttpInfo(metricsType, resourceIds, timeRange);
        return resp.getData();
    }

    /**
     * query resource metrics.
     * query resource metrics..
     * @param metricsType  (required)
     * @param resourceIds  (required)
     * @param timeRange  (required)
     * @return ApiResponse&lt;ResourceMetricsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourceMetricsResult> v1beta2ResourceMetricsGetWithHttpInfo(String metricsType, List<String> resourceIds, Integer timeRange) throws ApiException {
        com.squareup.okhttp.Call call = v1beta2ResourceMetricsGetValidateBeforeCall(metricsType, resourceIds, timeRange, null, null);
        Type localVarReturnType = new TypeToken<ResourceMetricsResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * query resource metrics. (asynchronously)
     * query resource metrics..
     * @param metricsType  (required)
     * @param resourceIds  (required)
     * @param timeRange  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call v1beta2ResourceMetricsGetAsync(String metricsType, List<String> resourceIds, Integer timeRange, final ApiCallback<ResourceMetricsResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = v1beta2ResourceMetricsGetValidateBeforeCall(metricsType, resourceIds, timeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourceMetricsResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
